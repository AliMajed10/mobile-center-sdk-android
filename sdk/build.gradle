//
// :sdk
//

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'jacoco'

    def supportLibVersion = rootProject.ext.supportLibVersion

    android {
        compileSdkVersion rootProject.ext.compileSdkVersion
        buildToolsVersion rootProject.ext.buildToolsVersion

        defaultConfig {
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionCode rootProject.ext.versionCode
            versionName rootProject.ext.versionName
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            consumerProguardFiles 'proguard-rules.pro'
        }
        buildTypes {
            release {
                minifyEnabled false
            }
            debug {
                testCoverageEnabled true
            }
        }
        testOptions {
            unitTests.returnDefaultValues = true
        }
    }

    jacoco {
        toolVersion = "0.7.4.+"
    }

    dependencies {
        compile "com.android.support:support-annotations:$supportLibVersion"

        testCompile 'org.powermock:powermock-api-mockito:1.6.5'
        testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.5'
        testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
        testCompile 'org.powermock:powermock-module-junit4:1.6.5'

        androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4'
        androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
        androidTestCompile 'com.android.support.test:runner:0.5'
        androidTestCompile 'com.android.support.test:rules:0.5'
    }

    task coverageReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport', 'testDebugUnitTest']) {

        reports {
            xml.enabled = false
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = files(["${buildDir}/jacoco/testDebugUnitTest.exec",
                               "${buildDir}/outputs/code-coverage/connected/coverage.ec"])
    }
}